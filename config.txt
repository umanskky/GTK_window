
На верху полезные ссылки:
https://learn.microsoft.com/en-us/windows/win32/devio/monitoring-communications-events
https://freevirtualserialports.com/screenshots  ---- Virtual Serial Port Bridge
https://www.pololu.com/docs/0J73/15.6           ---- Example Serial Port C 
https://www.google.co.uk/search?gcx=c&sourceid=chrome&ie=UTF-8&q=RS232+From+C+program#ip=1  ---- Google: RS232 From C program
https://social.msdn.microsoft.com/Forums/en-US/bad452cb-4fc2-4a86-9b60-070b43577cc9/is-there-a-simple-example-desktop-programming-c-for-bluetooth-low-energy-devices?forum=wdk   --- Bluethoo console app



Внизу кусочки кода (образцы):

//****************************************************
// превое приложение - проверка компилятора и дебагера
//****************************************************

#include <stdio.h>
#include <gtk/gtk.h>

int main(){
    printf("Hallo world Уманский Саша!");
}

//****************************************************
// Превое приложение оконное GTK+
//****************************************************

#include <gtk/gtk.h> // Подключение библиотеки GTK+

static void on_activate (GtkApplication *app) {
  // Create a new window
  GtkWidget *window = gtk_application_window_new (app);
  // Create a new button
  GtkWidget *button = gtk_button_new_with_label ("Hello, World Уманский!"); // Название окна
  // When the button is clicked, close the window passed as an argument
  g_signal_connect_swapped (button, "clicked", G_CALLBACK (gtk_window_close), window);
  gtk_window_set_child (GTK_WINDOW (window), button);
  gtk_window_present (GTK_WINDOW (window));
}

int main (int argc, char *argv[]) {
  // Create a new application
  GtkApplication *app = gtk_application_new ("com.example.GtkApplication", G_APPLICATION_DEFAULT_FLAGS);
  g_signal_connect (app, "activate", G_CALLBACK (on_activate), NULL);
  return g_application_run (G_APPLICATION (app), argc, argv);
}

//****************************************************
// Приложение для windows - работа с SerialPort (COM...)
//****************************************************

#include <windows.h>
#include <tchar.h>
#include <stdio.h>

void PrintCommState(DCB dcb)
{
    //  Print some of the DCB structure values
    _tprintf( TEXT("\nBaudRate = %d, ByteSize = %d, Parity = %d, StopBits = %d\n"), 
              dcb.BaudRate, 
              dcb.ByteSize, 
              dcb.Parity,
              dcb.StopBits );
}


int _tmain( int argc, TCHAR *argv[] )
{
   DCB dcb;
   HANDLE hCom;
   BOOL fSuccess;
   TCHAR *pcCommPort = TEXT("COM2"); //  Most systems have a COM1 port  "\\\\.\\COM4"

   //  Open a handle to the specified com port.
   hCom = CreateFile( pcCommPort,
                      GENERIC_READ | GENERIC_WRITE,
                      0,      //  must be opened with exclusive-access
                      NULL,   //  default security attributes
                      OPEN_EXISTING, //  must use OPEN_EXISTING
                      0,      //  not overlapped I/O
                      NULL ); //  hTemplate must be NULL for comm devices

   if (hCom == INVALID_HANDLE_VALUE) 
   {
       //  Handle the error.
       printf ("CreateFile failed with error %d.\n", GetLastError());
       return (1);
   }

   //  Initialize the DCB structure.
   SecureZeroMemory(&dcb, sizeof(DCB));
   dcb.DCBlength = sizeof(DCB);

   //  Build on the current configuration by first retrieving all current
   //  settings.
   fSuccess = GetCommState(hCom, &dcb);

   if (!fSuccess) 
   {
      //  Handle the error.
      printf ("GetCommState failed with error %d.\n", GetLastError());
      return (2);
   }

   PrintCommState(dcb);       //  Output to console

   //  Fill in some DCB values and set the com state: 
   //  57,600 bps, 8 data bits, no parity, and 1 stop bit.
   dcb.BaudRate = CBR_56000;     //  baud rate
   dcb.ByteSize = 8;             //  data size, xmit and rcv
   dcb.Parity   = NOPARITY;      //  parity bit
   dcb.StopBits = ONESTOPBIT;    //  stop bit

   fSuccess = SetCommState(hCom, &dcb);

   if (!fSuccess) 
   {
      //  Handle the error.
      printf ("SetCommState failed with error %d.\n", GetLastError());
      return (3);
   }

   //  Get the comm config again.
   fSuccess = GetCommState(hCom, &dcb);

   if (!fSuccess) 
   {
      //  Handle the error.
      printf ("GetCommState failed with error %d.\n", GetLastError());
      return (2);
   }

   PrintCommState(dcb);       //  Output to console Yes

   _tprintf (TEXT("Serial port %s successfully reconfigured.\n"), pcCommPort);
   return (0);
}

//****************************************************
// Приложение для windows - работа с SerialPort (COM...) отправка знячений
//****************************************************

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   // Define the five bytes to send ("hello")
   char bytes_to_send[15];
   bytes_to_send[0] = '\n';
   bytes_to_send[1] = 'a';
   bytes_to_send[2] = 'd';
   bytes_to_send[3] = 'm';
   bytes_to_send[4] = 'i';
   bytes_to_send[5] = 'n';
   bytes_to_send[6] = '\n';
   bytes_to_send[7] = 's';
   bytes_to_send[8] = 'h';
   bytes_to_send[9] = 'o';
   bytes_to_send[10] = 'w';
   bytes_to_send[11] = ' ';
   bytes_to_send[12] = 'i';
   bytes_to_send[13] = 'p';
   bytes_to_send[14] = '\n';

// Declare variables and structures
   HANDLE hSerial;
   DCB dcbSerialParams = {0};
   COMMTIMEOUTS timeouts = {0};

   // Open the highest available serial port number
   fprintf(stderr, "Opening serial port...");
   hSerial = CreateFile(
               "\\\\.\\COM2", GENERIC_READ|GENERIC_WRITE, 0, NULL,
               OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
   if (hSerial == INVALID_HANDLE_VALUE)
   {
         fprintf(stderr, "Error\n");
         return 1;
   }
   else fprintf(stderr, "OK\n");

   // Set device parameters (38400 baud, 1 start bit,
   // 1 stop bit, no parity)
   dcbSerialParams.DCBlength = sizeof(dcbSerialParams);
   if (GetCommState(hSerial, &dcbSerialParams) == 0)
   {
      fprintf(stderr, "Error getting device state\n");
      CloseHandle(hSerial);
      return 1;
   }

   dcbSerialParams.BaudRate = CBR_115200;
   dcbSerialParams.ByteSize = 8;
   dcbSerialParams.StopBits = ONESTOPBIT;
   dcbSerialParams.Parity = NOPARITY;
   if(SetCommState(hSerial, &dcbSerialParams) == 0)
   {
      fprintf(stderr, "Error setting device parameters\n");
      CloseHandle(hSerial);
      return 1;
   }

   // Set COM port timeout settings
   timeouts.ReadIntervalTimeout = 50;
   timeouts.ReadTotalTimeoutConstant = 50;
   timeouts.ReadTotalTimeoutMultiplier = 10;
   timeouts.WriteTotalTimeoutConstant = 50;
   timeouts.WriteTotalTimeoutMultiplier = 10;
   if(SetCommTimeouts(hSerial, &timeouts) == 0)
   {
      fprintf(stderr, "Error setting timeouts\n");
      CloseHandle(hSerial);
      return 1;
   }

   // Send specified text (remaining command line arguments)
   DWORD bytes_written, total_bytes_written = 0;
   fprintf(stderr, "Sending bytes...");
   if(!WriteFile(hSerial, bytes_to_send, sizeof(bytes_to_send), &bytes_written, NULL))
   {
      fprintf(stderr, "Error\n");
      CloseHandle(hSerial);
      return 1;
   }

   fprintf(stderr, "%d bytes written\n", bytes_written);

   // Close serial port
   fprintf(stderr, "Closing serial port...");
   if (CloseHandle(hSerial) == 0)
   {
      fprintf(stderr, "Error\n");
      return 1;
   }
   fprintf(stderr, "OK\n");
   fprintf(stderr, "the sent sentence is: ");
   for(int i=0;i<sizeof(bytes_to_send);i++){
      fprintf(stderr,"%c",bytes_to_send[i]);
   }

   // exit normally
   return 0;
}